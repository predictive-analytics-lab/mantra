---
name: ranzen CI

on:
  pull_request:
    branches:
    - main

jobs:
  format_with_black_and_isort:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install black
      run: |
        python -m pip install --upgrade pip
        pip install black isort
    - name: Format with black
      run: |
        python -m black --check -l 100 -t py37 -S ranzen/
        python -m black --check -l 100 -t py37 -S tests/
    - name: Format with isort
      run: |
        isort . --check --diff

  check_docstrings:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install darglint
      run: |
        python -m pip install --upgrade pip
        pip install darglint
    - name: Check docstrings with darglint
      run: |
        darglint --docstring-style sphinx -v 2 -z long ranzen

  run_tests_and_type_checking:
    needs: [format_with_black_and_isort, check_docstrings]
    runs-on: ubuntu-latest

    steps:
      # ----------------------------------------------
      #  ----  check-out repo and set-up python ----
      # ----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      # ----------------------------------------------
      #  -----  install & configure poetry  -----
      # ----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # ----------------------------------------------
      #       load cached venv if cache exists
      # ----------------------------------------------
      - name: Set up Poetry cache for Python dependencies
        id: cached-poetry-dependencies
        # uses: actions/cache@v2
        uses: pat-s/always-upload-cache@v2
        with:
          path: .venv
          key: venvEM2-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      # ----------------------------------------------
      # install dependencies if cache does not exist
      # ----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install -E all --no-interaction --no-root

      # ----------------------------------------------
      #  -----  install and run pyright  -----
      # ----------------------------------------------
      - name: Setup node.js (for pyright)
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Install pyright
        run: npm install -g pyright

      - name: Run pyright
        continue-on-error: true
        run: |
          poetry shell pyright ranzen
          poetry shell pyright tests

      # ----------------------------------------------
      #  -----           Run Tests            -----
      # ----------------------------------------------
      - name: Test with pytest
        run: |
          poetry run python -m pytest -vv tests/
